// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/kubeflow/spark-operator/v2/api/v1beta2"
	"sync"
)

// Ensure, that SparkApplicationRepositoryMock does implement SparkApplicationRepository.
// If this is not the case, regenerate this file with moq.
var _ SparkApplicationRepository = &SparkApplicationRepositoryMock{}

// SparkApplicationRepositoryMock is a mock implementation of SparkApplicationRepository.
//
//	func TestSomethingThatUsesSparkApplicationRepository(t *testing.T) {
//
//		// make and configure a mocked SparkApplicationRepository
//		mockedSparkApplicationRepository := &SparkApplicationRepositoryMock{
//			CreateFunc: func(ctx context.Context, application *v1beta2.SparkApplication) (*v1beta2.SparkApplication, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, namespace string, name string) error {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(namespace string, name string) (*v1beta2.SparkApplication, error) {
//				panic("mock out the Get method")
//			},
//			GetLogsFunc: func(namespace string, name string, tailLines int64) (*string, error) {
//				panic("mock out the GetLogs method")
//			},
//			ListFunc: func(namespace string) ([]*v1beta2.SparkApplication, error) {
//				panic("mock out the List method")
//			},
//		}
//
//		// use mockedSparkApplicationRepository in code that requires SparkApplicationRepository
//		// and then make assertions.
//
//	}
type SparkApplicationRepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, application *v1beta2.SparkApplication) (*v1beta2.SparkApplication, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, namespace string, name string) error

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1beta2.SparkApplication, error)

	// GetLogsFunc mocks the GetLogs method.
	GetLogsFunc func(namespace string, name string, tailLines int64) (*string, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string) ([]*v1beta2.SparkApplication, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Application is the application argument value.
			Application *v1beta2.SparkApplication
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// GetLogs holds details about calls to the GetLogs method.
		GetLogs []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// TailLines is the tailLines argument value.
			TailLines int64
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
	lockCreate  sync.RWMutex
	lockDelete  sync.RWMutex
	lockGet     sync.RWMutex
	lockGetLogs sync.RWMutex
	lockList    sync.RWMutex
}

// Create calls CreateFunc.
func (mock *SparkApplicationRepositoryMock) Create(ctx context.Context, application *v1beta2.SparkApplication) (*v1beta2.SparkApplication, error) {
	if mock.CreateFunc == nil {
		panic("SparkApplicationRepositoryMock.CreateFunc: method is nil but SparkApplicationRepository.Create was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Application *v1beta2.SparkApplication
	}{
		Ctx:         ctx,
		Application: application,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, application)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedSparkApplicationRepository.CreateCalls())
func (mock *SparkApplicationRepositoryMock) CreateCalls() []struct {
	Ctx         context.Context
	Application *v1beta2.SparkApplication
} {
	var calls []struct {
		Ctx         context.Context
		Application *v1beta2.SparkApplication
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *SparkApplicationRepositoryMock) Delete(ctx context.Context, namespace string, name string) error {
	if mock.DeleteFunc == nil {
		panic("SparkApplicationRepositoryMock.DeleteFunc: method is nil but SparkApplicationRepository.Delete was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Namespace string
		Name      string
	}{
		Ctx:       ctx,
		Namespace: namespace,
		Name:      name,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, namespace, name)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedSparkApplicationRepository.DeleteCalls())
func (mock *SparkApplicationRepositoryMock) DeleteCalls() []struct {
	Ctx       context.Context
	Namespace string
	Name      string
} {
	var calls []struct {
		Ctx       context.Context
		Namespace string
		Name      string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *SparkApplicationRepositoryMock) Get(namespace string, name string) (*v1beta2.SparkApplication, error) {
	if mock.GetFunc == nil {
		panic("SparkApplicationRepositoryMock.GetFunc: method is nil but SparkApplicationRepository.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedSparkApplicationRepository.GetCalls())
func (mock *SparkApplicationRepositoryMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetLogs calls GetLogsFunc.
func (mock *SparkApplicationRepositoryMock) GetLogs(namespace string, name string, tailLines int64) (*string, error) {
	if mock.GetLogsFunc == nil {
		panic("SparkApplicationRepositoryMock.GetLogsFunc: method is nil but SparkApplicationRepository.GetLogs was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		TailLines int64
	}{
		Namespace: namespace,
		Name:      name,
		TailLines: tailLines,
	}
	mock.lockGetLogs.Lock()
	mock.calls.GetLogs = append(mock.calls.GetLogs, callInfo)
	mock.lockGetLogs.Unlock()
	return mock.GetLogsFunc(namespace, name, tailLines)
}

// GetLogsCalls gets all the calls that were made to GetLogs.
// Check the length with:
//
//	len(mockedSparkApplicationRepository.GetLogsCalls())
func (mock *SparkApplicationRepositoryMock) GetLogsCalls() []struct {
	Namespace string
	Name      string
	TailLines int64
} {
	var calls []struct {
		Namespace string
		Name      string
		TailLines int64
	}
	mock.lockGetLogs.RLock()
	calls = mock.calls.GetLogs
	mock.lockGetLogs.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *SparkApplicationRepositoryMock) List(namespace string) ([]*v1beta2.SparkApplication, error) {
	if mock.ListFunc == nil {
		panic("SparkApplicationRepositoryMock.ListFunc: method is nil but SparkApplicationRepository.List was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(namespace)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedSparkApplicationRepository.ListCalls())
func (mock *SparkApplicationRepositoryMock) ListCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}
