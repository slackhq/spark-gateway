// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/kubeflow/spark-operator/v2/api/v1beta2"
	"github.com/slackhq/spark-gateway/internal/domain"
	"sync"
)

// Ensure, that SparkApplicationServiceMock does implement SparkApplicationService.
// If this is not the case, regenerate this file with moq.
var _ SparkApplicationService = &SparkApplicationServiceMock{}

// SparkApplicationServiceMock is a mock implementation of SparkApplicationService.
//
//	func TestSomethingThatUsesSparkApplicationService(t *testing.T) {
//
//		// make and configure a mocked SparkApplicationService
//		mockedSparkApplicationService := &SparkApplicationServiceMock{
//			CreateFunc: func(ctx context.Context, application *v1beta2.SparkApplication) (*v1beta2.SparkApplication, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, namespace string, name string) error {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(namespace string, name string) (*v1beta2.SparkApplication, error) {
//				panic("mock out the Get method")
//			},
//			ListFunc: func(namespace string) ([]*domain.GatewayApplicationSummary, error) {
//				panic("mock out the List method")
//			},
//			LogsFunc: func(namespace string, name string, tailLines int64) (*string, error) {
//				panic("mock out the Logs method")
//			},
//			StatusFunc: func(namespace string, name string) (*v1beta2.SparkApplicationStatus, error) {
//				panic("mock out the Status method")
//			},
//		}
//
//		// use mockedSparkApplicationService in code that requires SparkApplicationService
//		// and then make assertions.
//
//	}
type SparkApplicationServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, application *v1beta2.SparkApplication) (*v1beta2.SparkApplication, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, namespace string, name string) error

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1beta2.SparkApplication, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string) ([]*domain.GatewayApplicationSummary, error)

	// LogsFunc mocks the Logs method.
	LogsFunc func(namespace string, name string, tailLines int64) (*string, error)

	// StatusFunc mocks the Status method.
	StatusFunc func(namespace string, name string) (*v1beta2.SparkApplicationStatus, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Application is the application argument value.
			Application *v1beta2.SparkApplication
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// Logs holds details about calls to the Logs method.
		Logs []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// TailLines is the tailLines argument value.
			TailLines int64
		}
		// Status holds details about calls to the Status method.
		Status []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
	}
	lockCreate sync.RWMutex
	lockDelete sync.RWMutex
	lockGet    sync.RWMutex
	lockList   sync.RWMutex
	lockLogs   sync.RWMutex
	lockStatus sync.RWMutex
}

// Create calls CreateFunc.
func (mock *SparkApplicationServiceMock) Create(ctx context.Context, application *v1beta2.SparkApplication) (*v1beta2.SparkApplication, error) {
	if mock.CreateFunc == nil {
		panic("SparkApplicationServiceMock.CreateFunc: method is nil but SparkApplicationService.Create was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Application *v1beta2.SparkApplication
	}{
		Ctx:         ctx,
		Application: application,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, application)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedSparkApplicationService.CreateCalls())
func (mock *SparkApplicationServiceMock) CreateCalls() []struct {
	Ctx         context.Context
	Application *v1beta2.SparkApplication
} {
	var calls []struct {
		Ctx         context.Context
		Application *v1beta2.SparkApplication
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *SparkApplicationServiceMock) Delete(ctx context.Context, namespace string, name string) error {
	if mock.DeleteFunc == nil {
		panic("SparkApplicationServiceMock.DeleteFunc: method is nil but SparkApplicationService.Delete was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Namespace string
		Name      string
	}{
		Ctx:       ctx,
		Namespace: namespace,
		Name:      name,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, namespace, name)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedSparkApplicationService.DeleteCalls())
func (mock *SparkApplicationServiceMock) DeleteCalls() []struct {
	Ctx       context.Context
	Namespace string
	Name      string
} {
	var calls []struct {
		Ctx       context.Context
		Namespace string
		Name      string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *SparkApplicationServiceMock) Get(namespace string, name string) (*v1beta2.SparkApplication, error) {
	if mock.GetFunc == nil {
		panic("SparkApplicationServiceMock.GetFunc: method is nil but SparkApplicationService.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedSparkApplicationService.GetCalls())
func (mock *SparkApplicationServiceMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *SparkApplicationServiceMock) List(namespace string) ([]*domain.GatewayApplicationSummary, error) {
	if mock.ListFunc == nil {
		panic("SparkApplicationServiceMock.ListFunc: method is nil but SparkApplicationService.List was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(namespace)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedSparkApplicationService.ListCalls())
func (mock *SparkApplicationServiceMock) ListCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Logs calls LogsFunc.
func (mock *SparkApplicationServiceMock) Logs(namespace string, name string, tailLines int64) (*string, error) {
	if mock.LogsFunc == nil {
		panic("SparkApplicationServiceMock.LogsFunc: method is nil but SparkApplicationService.Logs was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		TailLines int64
	}{
		Namespace: namespace,
		Name:      name,
		TailLines: tailLines,
	}
	mock.lockLogs.Lock()
	mock.calls.Logs = append(mock.calls.Logs, callInfo)
	mock.lockLogs.Unlock()
	return mock.LogsFunc(namespace, name, tailLines)
}

// LogsCalls gets all the calls that were made to Logs.
// Check the length with:
//
//	len(mockedSparkApplicationService.LogsCalls())
func (mock *SparkApplicationServiceMock) LogsCalls() []struct {
	Namespace string
	Name      string
	TailLines int64
} {
	var calls []struct {
		Namespace string
		Name      string
		TailLines int64
	}
	mock.lockLogs.RLock()
	calls = mock.calls.Logs
	mock.lockLogs.RUnlock()
	return calls
}

// Status calls StatusFunc.
func (mock *SparkApplicationServiceMock) Status(namespace string, name string) (*v1beta2.SparkApplicationStatus, error) {
	if mock.StatusFunc == nil {
		panic("SparkApplicationServiceMock.StatusFunc: method is nil but SparkApplicationService.Status was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	mock.lockStatus.Lock()
	mock.calls.Status = append(mock.calls.Status, callInfo)
	mock.lockStatus.Unlock()
	return mock.StatusFunc(namespace, name)
}

// StatusCalls gets all the calls that were made to Status.
// Check the length with:
//
//	len(mockedSparkApplicationService.StatusCalls())
func (mock *SparkApplicationServiceMock) StatusCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	mock.lockStatus.RLock()
	calls = mock.calls.Status
	mock.lockStatus.RUnlock()
	return calls
}
