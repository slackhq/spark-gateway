// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"context"
	"github.com/google/uuid"
	v1beta2 "github.com/kubeflow/spark-operator/v2/api/v1beta2"
	"sync"
	"time"
)

// Ensure, that DatabaseRepositoryMock does implement DatabaseRepository.
// If this is not the case, regenerate this file with moq.
var _ DatabaseRepository = &DatabaseRepositoryMock{}

// DatabaseRepositoryMock is a mock implementation of DatabaseRepository.
//
//	func TestSomethingThatUsesDatabaseRepository(t *testing.T) {
//
//		// make and configure a mocked DatabaseRepository
//		mockedDatabaseRepository := &DatabaseRepositoryMock{
//			GetByIdFunc: func(ctx context.Context, gatewayIdUid uuid.UUID) (*SparkApplication, error) {
//				panic("mock out the GetById method")
//			},
//			InsertSparkApplicationFunc: func(ctx context.Context, gatewayIdUid uuid.UUID, creationTime time.Time, userSubmittedSparkApp *v1beta2.SparkApplication, clusterName string) error {
//				panic("mock out the InsertSparkApplication method")
//			},
//			UpdateSparkApplicationFunc: func(ctx context.Context, gatewayIdUid uuid.UUID, updateSparkApp v1beta2.SparkApplication) error {
//				panic("mock out the UpdateSparkApplication method")
//			},
//		}
//
//		// use mockedDatabaseRepository in code that requires DatabaseRepository
//		// and then make assertions.
//
//	}
type DatabaseRepositoryMock struct {
	// GetByIdFunc mocks the GetById method.
	GetByIdFunc func(ctx context.Context, gatewayIdUid uuid.UUID) (*SparkApplication, error)

	// InsertSparkApplicationFunc mocks the InsertSparkApplication method.
	InsertSparkApplicationFunc func(ctx context.Context, gatewayIdUid uuid.UUID, creationTime time.Time, userSubmittedSparkApp *v1beta2.SparkApplication, clusterName string) error

	// UpdateSparkApplicationFunc mocks the UpdateSparkApplication method.
	UpdateSparkApplicationFunc func(ctx context.Context, gatewayIdUid uuid.UUID, updateSparkApp v1beta2.SparkApplication) error

	// calls tracks calls to the methods.
	calls struct {
		// GetById holds details about calls to the GetById method.
		GetById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GatewayIdUid is the gatewayIdUid argument value.
			GatewayIdUid uuid.UUID
		}
		// InsertSparkApplication holds details about calls to the InsertSparkApplication method.
		InsertSparkApplication []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GatewayIdUid is the gatewayIdUid argument value.
			GatewayIdUid uuid.UUID
			// CreationTime is the creationTime argument value.
			CreationTime time.Time
			// UserSubmittedSparkApp is the userSubmittedSparkApp argument value.
			UserSubmittedSparkApp *v1beta2.SparkApplication
			// ClusterName is the clusterName argument value.
			ClusterName string
		}
		// UpdateSparkApplication holds details about calls to the UpdateSparkApplication method.
		UpdateSparkApplication []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GatewayIdUid is the gatewayIdUid argument value.
			GatewayIdUid uuid.UUID
			// UpdateSparkApp is the updateSparkApp argument value.
			UpdateSparkApp v1beta2.SparkApplication
		}
	}
	lockGetById                sync.RWMutex
	lockInsertSparkApplication sync.RWMutex
	lockUpdateSparkApplication sync.RWMutex
}

// GetById calls GetByIdFunc.
func (mock *DatabaseRepositoryMock) GetById(ctx context.Context, gatewayIdUid uuid.UUID) (*SparkApplication, error) {
	if mock.GetByIdFunc == nil {
		panic("DatabaseRepositoryMock.GetByIdFunc: method is nil but DatabaseRepository.GetById was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		GatewayIdUid uuid.UUID
	}{
		Ctx:          ctx,
		GatewayIdUid: gatewayIdUid,
	}
	mock.lockGetById.Lock()
	mock.calls.GetById = append(mock.calls.GetById, callInfo)
	mock.lockGetById.Unlock()
	return mock.GetByIdFunc(ctx, gatewayIdUid)
}

// GetByIdCalls gets all the calls that were made to GetById.
// Check the length with:
//
//	len(mockedDatabaseRepository.GetByIdCalls())
func (mock *DatabaseRepositoryMock) GetByIdCalls() []struct {
	Ctx          context.Context
	GatewayIdUid uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		GatewayIdUid uuid.UUID
	}
	mock.lockGetById.RLock()
	calls = mock.calls.GetById
	mock.lockGetById.RUnlock()
	return calls
}

// InsertSparkApplication calls InsertSparkApplicationFunc.
func (mock *DatabaseRepositoryMock) InsertSparkApplication(ctx context.Context, gatewayIdUid uuid.UUID, creationTime time.Time, userSubmittedSparkApp *v1beta2.SparkApplication, clusterName string) error {
	if mock.InsertSparkApplicationFunc == nil {
		panic("DatabaseRepositoryMock.InsertSparkApplicationFunc: method is nil but DatabaseRepository.InsertSparkApplication was just called")
	}
	callInfo := struct {
		Ctx                   context.Context
		GatewayIdUid          uuid.UUID
		CreationTime          time.Time
		UserSubmittedSparkApp *v1beta2.SparkApplication
		ClusterName           string
	}{
		Ctx:                   ctx,
		GatewayIdUid:          gatewayIdUid,
		CreationTime:          creationTime,
		UserSubmittedSparkApp: userSubmittedSparkApp,
		ClusterName:           clusterName,
	}
	mock.lockInsertSparkApplication.Lock()
	mock.calls.InsertSparkApplication = append(mock.calls.InsertSparkApplication, callInfo)
	mock.lockInsertSparkApplication.Unlock()
	return mock.InsertSparkApplicationFunc(ctx, gatewayIdUid, creationTime, userSubmittedSparkApp, clusterName)
}

// InsertSparkApplicationCalls gets all the calls that were made to InsertSparkApplication.
// Check the length with:
//
//	len(mockedDatabaseRepository.InsertSparkApplicationCalls())
func (mock *DatabaseRepositoryMock) InsertSparkApplicationCalls() []struct {
	Ctx                   context.Context
	GatewayIdUid          uuid.UUID
	CreationTime          time.Time
	UserSubmittedSparkApp *v1beta2.SparkApplication
	ClusterName           string
} {
	var calls []struct {
		Ctx                   context.Context
		GatewayIdUid          uuid.UUID
		CreationTime          time.Time
		UserSubmittedSparkApp *v1beta2.SparkApplication
		ClusterName           string
	}
	mock.lockInsertSparkApplication.RLock()
	calls = mock.calls.InsertSparkApplication
	mock.lockInsertSparkApplication.RUnlock()
	return calls
}

// UpdateSparkApplication calls UpdateSparkApplicationFunc.
func (mock *DatabaseRepositoryMock) UpdateSparkApplication(ctx context.Context, gatewayIdUid uuid.UUID, updateSparkApp v1beta2.SparkApplication) error {
	if mock.UpdateSparkApplicationFunc == nil {
		panic("DatabaseRepositoryMock.UpdateSparkApplicationFunc: method is nil but DatabaseRepository.UpdateSparkApplication was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		GatewayIdUid   uuid.UUID
		UpdateSparkApp v1beta2.SparkApplication
	}{
		Ctx:            ctx,
		GatewayIdUid:   gatewayIdUid,
		UpdateSparkApp: updateSparkApp,
	}
	mock.lockUpdateSparkApplication.Lock()
	mock.calls.UpdateSparkApplication = append(mock.calls.UpdateSparkApplication, callInfo)
	mock.lockUpdateSparkApplication.Unlock()
	return mock.UpdateSparkApplicationFunc(ctx, gatewayIdUid, updateSparkApp)
}

// UpdateSparkApplicationCalls gets all the calls that were made to UpdateSparkApplication.
// Check the length with:
//
//	len(mockedDatabaseRepository.UpdateSparkApplicationCalls())
func (mock *DatabaseRepositoryMock) UpdateSparkApplicationCalls() []struct {
	Ctx            context.Context
	GatewayIdUid   uuid.UUID
	UpdateSparkApp v1beta2.SparkApplication
} {
	var calls []struct {
		Ctx            context.Context
		GatewayIdUid   uuid.UUID
		UpdateSparkApp v1beta2.SparkApplication
	}
	mock.lockUpdateSparkApplication.RLock()
	calls = mock.calls.UpdateSparkApplication
	mock.lockUpdateSparkApplication.RUnlock()
	return calls
}
