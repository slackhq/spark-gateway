// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"sync"

	"github.com/slackhq/spark-gateway/internal/domain"
)

// Ensure, that ClusterRepositoryMock does implement ClusterRepository.
// If this is not the case, regenerate this file with moq.
var _ ClusterRepository = &ClusterRepositoryMock{}

// ClusterRepositoryMock is a mock implementation of ClusterRepository.
//
//	func TestSomethingThatUsesClusterRepository(t *testing.T) {
//
//		// make and configure a mocked ClusterRepository
//		mockedClusterRepository := &ClusterRepositoryMock{
//			GetAllFunc: func() ([]domain.KubeCluster, error) {
//				panic("mock out the GetAll method")
//			},
//			GetAllWithNamespaceFunc: func(namespace string) ([]domain.KubeCluster, error) {
//				panic("mock out the GetAllWithNamespace method")
//			},
//			GetByIdFunc: func(clusterId string) (*domain.KubeCluster, error) {
//				panic("mock out the GetById method")
//			},
//			GetByNameFunc: func(cluster string) (*domain.KubeCluster, error) {
//				panic("mock out the GetByName method")
//			},
//		}
//
//		// use mockedClusterRepository in code that requires ClusterRepository
//		// and then make assertions.
//
//	}
type ClusterRepositoryMock struct {
	// GetAllFunc mocks the GetAll method.
	GetAllFunc func() ([]domain.KubeCluster, error)

	// GetAllWithNamespaceFunc mocks the GetAllWithNamespace method.
	GetAllWithNamespaceFunc func(namespace string) ([]domain.KubeCluster, error)

	// GetByIdFunc mocks the GetById method.
	GetByIdFunc func(clusterId string) (*domain.KubeCluster, error)

	// GetByNameFunc mocks the GetByName method.
	GetByNameFunc func(cluster string) (*domain.KubeCluster, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
		}
		// GetAllWithNamespace holds details about calls to the GetAllWithNamespace method.
		GetAllWithNamespace []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
		// GetById holds details about calls to the GetById method.
		GetById []struct {
			// ClusterId is the clusterId argument value.
			ClusterId string
		}
		// GetByName holds details about calls to the GetByName method.
		GetByName []struct {
			// Cluster is the cluster argument value.
			Cluster string
		}
	}
	lockGetAll              sync.RWMutex
	lockGetAllWithNamespace sync.RWMutex
	lockGetById             sync.RWMutex
	lockGetByName           sync.RWMutex
}

// GetAll calls GetAllFunc.
func (mock *ClusterRepositoryMock) GetAll() ([]domain.KubeCluster, error) {
	if mock.GetAllFunc == nil {
		panic("ClusterRepositoryMock.GetAllFunc: method is nil but ClusterRepository.GetAll was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc()
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedClusterRepository.GetAllCalls())
func (mock *ClusterRepositoryMock) GetAllCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllWithNamespace calls GetAllWithNamespaceFunc.
func (mock *ClusterRepositoryMock) GetAllWithNamespace(namespace string) ([]domain.KubeCluster, error) {
	if mock.GetAllWithNamespaceFunc == nil {
		panic("ClusterRepositoryMock.GetAllWithNamespaceFunc: method is nil but ClusterRepository.GetAllWithNamespace was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	mock.lockGetAllWithNamespace.Lock()
	mock.calls.GetAllWithNamespace = append(mock.calls.GetAllWithNamespace, callInfo)
	mock.lockGetAllWithNamespace.Unlock()
	return mock.GetAllWithNamespaceFunc(namespace)
}

// GetAllWithNamespaceCalls gets all the calls that were made to GetAllWithNamespace.
// Check the length with:
//
//	len(mockedClusterRepository.GetAllWithNamespaceCalls())
func (mock *ClusterRepositoryMock) GetAllWithNamespaceCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	mock.lockGetAllWithNamespace.RLock()
	calls = mock.calls.GetAllWithNamespace
	mock.lockGetAllWithNamespace.RUnlock()
	return calls
}

// GetById calls GetByIdFunc.
func (mock *ClusterRepositoryMock) GetById(clusterId string) (*domain.KubeCluster, error) {
	if mock.GetByIdFunc == nil {
		panic("ClusterRepositoryMock.GetByIdFunc: method is nil but ClusterRepository.GetById was just called")
	}
	callInfo := struct {
		ClusterId string
	}{
		ClusterId: clusterId,
	}
	mock.lockGetById.Lock()
	mock.calls.GetById = append(mock.calls.GetById, callInfo)
	mock.lockGetById.Unlock()
	return mock.GetByIdFunc(clusterId)
}

// GetByIdCalls gets all the calls that were made to GetById.
// Check the length with:
//
//	len(mockedClusterRepository.GetByIdCalls())
func (mock *ClusterRepositoryMock) GetByIdCalls() []struct {
	ClusterId string
} {
	var calls []struct {
		ClusterId string
	}
	mock.lockGetById.RLock()
	calls = mock.calls.GetById
	mock.lockGetById.RUnlock()
	return calls
}

// GetByName calls GetByNameFunc.
func (mock *ClusterRepositoryMock) GetByName(cluster string) (*domain.KubeCluster, error) {
	if mock.GetByNameFunc == nil {
		panic("ClusterRepositoryMock.GetByNameFunc: method is nil but ClusterRepository.GetByName was just called")
	}
	callInfo := struct {
		Cluster string
	}{
		Cluster: cluster,
	}
	mock.lockGetByName.Lock()
	mock.calls.GetByName = append(mock.calls.GetByName, callInfo)
	mock.lockGetByName.Unlock()
	return mock.GetByNameFunc(cluster)
}

// GetByNameCalls gets all the calls that were made to GetByName.
// Check the length with:
//
//	len(mockedClusterRepository.GetByNameCalls())
func (mock *ClusterRepositoryMock) GetByNameCalls() []struct {
	Cluster string
} {
	var calls []struct {
		Cluster string
	}
	mock.lockGetByName.RLock()
	calls = mock.calls.GetByName
	mock.lockGetByName.RUnlock()
	return calls
}
