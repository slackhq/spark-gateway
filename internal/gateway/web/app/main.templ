package app

import (
	"fmt"
    "time"
	"github.com/slackhq/spark-gateway/pkg/model"
    "github.com/kubeflow/spark-operator/v2/api/v1beta2"
)

type ApplicationCounts struct {
	Submitted  int
	Running    int
	Completed  int
	Failed     int
}

templ Main(counts ApplicationCounts, clusters []model.KubeCluster, applications []*model.GatewayApplicationMeta, selectedCluster, selectedNamespace string, namespaces []model.KubeNamespace) {
	@Layout("Spark Gateway") {
		@MainContent(counts, clusters, applications, selectedCluster, selectedNamespace, namespaces)
	}
}

templ MainContent(counts ApplicationCounts, clusters []model.KubeCluster, applications []*model.GatewayApplicationMeta, selectedCluster, selectedNamespace string, namespaces []model.KubeNamespace) {
	<div id="main-content">
		<div style="margin-bottom: 30px;">
			<h1 style="font-size: 28px; font-weight: 600; color: #333; margin-bottom: 10px;">Welcome to Spark Gateway</h1>
			<p style="color: #666; font-size: 16px;">Monitor and manage your Spark applications</p>
		</div>
		
		<div style="background: white; padding: 20px; border-radius: 8px; border: 1px solid #e1e5e9; margin-bottom: 20px;">
			<h3 style="font-size: 18px; font-weight: 600; color: #333; margin-bottom: 15px;">Application Status</h3>
			<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 15px;">
				<div style="text-align: center; padding: 10px;">
					<p style="font-size: 20px; font-weight: 700; color: #ffc107; margin: 0;">{ fmt.Sprintf("%d", counts.Submitted) }</p>
					<p style="color: #666; font-size: 12px; margin: 5px 0 0 0;">Submitted</p>
				</div>
				<div style="text-align: center; padding: 10px;">
					<p style="font-size: 20px; font-weight: 700; color: #28a745; margin: 0;">{ fmt.Sprintf("%d", counts.Running) }</p>
					<p style="color: #666; font-size: 12px; margin: 5px 0 0 0;">Running</p>
				</div>
				<div style="text-align: center; padding: 10px;">
					<p style="font-size: 20px; font-weight: 700; color: #007bff; margin: 0;">{ fmt.Sprintf("%d", counts.Completed) }</p>
					<p style="color: #666; font-size: 12px; margin: 5px 0 0 0;">Completed</p>
				</div>
				<div style="text-align: center; padding: 10px;">
					<p style="font-size: 20px; font-weight: 700; color: #dc3545; margin: 0;">{ fmt.Sprintf("%d", counts.Failed) }</p>
					<p style="color: #666; font-size: 12px; margin: 5px 0 0 0;">Failed</p>
				</div>
			</div>
		</div>
		
		<div style="background: white; padding: 20px; border-radius: 8px; border: 1px solid #e1e5e9; margin-bottom: 20px;">
			<h3 style="font-size: 18px; font-weight: 600; color: #333; margin-bottom: 15px;">Filters</h3>
			<form style="display: flex; flex-direction: column; gap: 15px;">
				<div>
					<label style="display: block; margin-bottom: 5px; font-weight: 500; color: #333; font-size: 14px;">Cluster</label>
					<select 
						name="cluster" 
						id="cluster-select"
						style="width: 100%; padding: 8px 12px; border: 1px solid #d1d5db; border-radius: 4px; font-size: 14px;"
						hx-get="/ui/"
						hx-target="#main-content"
						hx-trigger="change"
						hx-include="[name='namespace']"
					>
						<option value="">Select a cluster...</option>
						for _, cluster := range clusters {
							<option value={ cluster.Name } selected?={ cluster.Name == selectedCluster }>{ cluster.Name }</option>
						}
					</select>
				</div>
				
				<div>
					<label style="display: block; margin-bottom: 5px; font-weight: 500; color: #333; font-size: 14px;">Namespace</label>
					<select 
						name="namespace"
						id="namespace-select"
						style="width: 100%; padding: 8px 12px; border: 1px solid #d1d5db; border-radius: 4px; font-size: 14px;"
						disabled?={ selectedCluster == "" }
						hx-get="/ui/"
						hx-target="#main-content"
						hx-trigger="change"
						hx-include="[name='cluster']"
					>
						<option value="">Select a namespace...</option>
						for _, namespace := range namespaces {
							<option value={ namespace.Name } selected?={ namespace.Name == selectedNamespace }>{ namespace.Name }</option>
						}
					</select>
				</div>
				
				<div>
					<button 
						type="button"
						style="padding: 8px 16px; background: #6c757d; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 14px; width: fit-content;"
						hx-get="/ui/"
						hx-target="#main-content"
						onclick="document.getElementById('cluster-select').value = ''; document.getElementById('namespace-select').value = '';"
					>
						Clear
					</button>
				</div>
			</form>
		</div>
		
		<div style="background: white; border-radius: 8px; border: 1px solid #e1e5e9; overflow: hidden;">
			if selectedCluster == "" {
				<div style="padding: 40px; text-align: center;">
					<p style="color: #666; font-size: 16px;">Please select a cluster to view applications</p>
				</div>
			} else if selectedNamespace == "" {
				<div style="padding: 40px; text-align: center;">
					<p style="color: #666; font-size: 16px;">Please select a namespace to view applications</p>
				</div>
			} else if len(applications) == 0 {
				<div style="padding: 40px; text-align: center;">
					<p style="color: #666; font-size: 16px;">No applications found in { selectedCluster }/{ selectedNamespace }</p>
				</div>
			} else {
				<div style="overflow-x: auto;">
					<table style="width: 100%; border-collapse: collapse; min-width: 1500px;">
						<thead style="background-color: #f8f9fa; border-bottom: 2px solid #e1e5e9;">
							<tr>
								<th style="padding: 12px 16px; text-align: left; font-weight: 600; color: #333; border-bottom: 1px solid #e1e5e9; white-space: nowrap;">Name</th>
								<th style="padding: 12px 16px; text-align: left; font-weight: 600; color: #333; border-bottom: 1px solid #e1e5e9; white-space: nowrap;">Spark App ID</th>
								<th style="padding: 12px 16px; text-align: left; font-weight: 600; color: #333; border-bottom: 1px solid #e1e5e9; white-space: nowrap;">Submission Time</th>
								<th style="padding: 12px 16px; text-align: left; font-weight: 600; color: #333; border-bottom: 1px solid #e1e5e9; white-space: nowrap;">Termination Time</th>
								<th style="padding: 12px 16px; text-align: left; font-weight: 600; color: #333; border-bottom: 1px solid #e1e5e9; white-space: nowrap;">User</th>
								<th style="padding: 12px 16px; text-align: left; font-weight: 600; color: #333; border-bottom: 1px solid #e1e5e9; white-space: nowrap;">Driver Info</th>
								<th style="padding: 12px 16px; text-align: left; font-weight: 600; color: #333; border-bottom: 1px solid #e1e5e9; white-space: nowrap;">App State</th>
								<th style="padding: 12px 16px; text-align: left; font-weight: 600; color: #333; border-bottom: 1px solid #e1e5e9; white-space: nowrap;">Submission Attempts</th>
								<th style="padding: 12px 16px; text-align: left; font-weight: 600; color: #333; border-bottom: 1px solid #e1e5e9; white-space: nowrap;">Spec</th>
							</tr>
						</thead>
						<tbody>
							for i, app := range applications {
								<tr style={ templ.KV("background-color", getRowColor(i)) }>
									<td style="padding: 12px 16px; border-bottom: 1px solid #e1e5e9;">
										<div style="font-weight: 500; color: #333;">{ app.SparkAppMeta.ObjectMeta.Name }</div>
									</td>
									<td style="padding: 12px 16px; border-bottom: 1px solid #e1e5e9;">
										<code style="background: #f8f9fa; padding: 2px 6px; border-radius: 3px; font-size: 12px;">{ app.SparkAppMeta.SparkApplicationID }</code>
									</td>
									<td style="padding: 12px 16px; border-bottom: 1px solid #e1e5e9;">
										<div style="font-size: 14px; color: #333;">{ formatTime(app.SparkAppMeta.LastSubmissionAttemptTime.Time) }</div>
									</td>
									<td style="padding: 12px 16px; border-bottom: 1px solid #e1e5e9;">
										<div style="font-size: 14px; color: #333;">{ formatTime(app.SparkAppMeta.TerminationTime.Time) }</div>
									</td>
                                    <td style="padding: 12px 16px; border-bottom: 1px solid #e1e5e9;">
                                        <div style="font-size: 14px; color: #333;">{ app.User }</div>
                                    </td>
									<td style="padding: 12px 16px; border-bottom: 1px solid #e1e5e9;">
										if app.SparkAppMeta.DriverInfo.PodName != "" || app.SparkAppMeta.DriverInfo.WebUIIngressAddress != "" {
											<div 
												style="cursor: pointer; user-select: none; display: flex; align-items: center; gap: 4px; font-size: 14px; color: #007bff;"
												data-target={ "driver-info-" + fmt.Sprintf("%d", i) }
												onclick="toggleDriverInfo(this.getAttribute('data-target'))"
											>
												<span id={ "driver-toggle-" + fmt.Sprintf("%d", i) } style="font-size: 12px;">â–¶</span>
												<span>Driver Info</span>
											</div>
											<div 
												id={ "driver-info-" + fmt.Sprintf("%d", i) }
												style="display: none; margin-top: 8px; padding: 8px; background: #f8f9fa; border-radius: 4px; font-size: 13px;"
											>
												if app.SparkAppMeta.DriverInfo.PodName != "" {
													<div style="margin-bottom: 4px;">
														<strong>Pod Name:</strong> { app.SparkAppMeta.DriverInfo.PodName }
													</div>
												}
												if app.SparkAppMeta.DriverInfo.WebUIIngressAddress != "" {
													<div>
														<strong>Ingress Address:</strong> { app.SparkAppMeta.DriverInfo.WebUIIngressAddress }
													</div>
												}
											</div>
										} else {
											<span style="color: #6c757d; font-style: italic;">No driver info</span>
										}
									</td>
									<td style="padding: 12px 16px; border-bottom: 1px solid #e1e5e9;">
										<span style={ "background: " + getStateColor(formatAppState(app.SparkAppMeta.AppState)) + "; color: white; padding: 4px 8px; border-radius: 12px; font-size: 12px; font-weight: 500;" }>
											{ formatAppState(app.SparkAppMeta.AppState) }
										</span>
									</td>
									<td style="padding: 12px 16px; border-bottom: 1px solid #e1e5e9; text-align: center;">
										<span style="font-weight: 500; color: #333;">{ fmt.Sprintf("%d", app.SparkAppMeta.SubmissionAttempts) }</span>
									</td>
									<td style="padding: 12px 16px; border-bottom: 1px solid #e1e5e9; text-align: center;">
										<button 
											style="padding: 6px 12px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;"
											class="spec-button"
											data-gateway-id={ app.SparkAppMeta.ObjectMeta.Name }
										>
											View Spec
										</button>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			}
		</div>
	</div>
	<script>
		function toggleDriverInfo(elementId) {
			const content = document.getElementById(elementId);
			const toggle = document.getElementById(elementId.replace('driver-info-', 'driver-toggle-'));
			
			if (content.style.display === 'none' || content.style.display === '') {
				content.style.display = 'block';
				toggle.textContent = 'â–¼';
			} else {
				content.style.display = 'none';
				toggle.textContent = 'â–¶';
			}
		}

		function showSpecPopover(gatewayId) {
			// Create overlay if it doesn't exist
			let overlay = document.getElementById('spec-overlay');
			if (!overlay) {
				overlay = document.createElement('div');
				overlay.id = 'spec-overlay';
				overlay.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); display: none; z-index: 1000; justify-content: center; align-items: center;';
				document.body.appendChild(overlay);
			}

			// Create popover if it doesn't exist
			let popover = document.getElementById('spec-popover');
			if (!popover) {
				popover = document.createElement('div');
				popover.id = 'spec-popover';
				popover.style.cssText = 'background: white; padding: 20px; border-radius: 8px; max-width: 80%; max-height: 80%; overflow: auto; position: relative;';
				overlay.appendChild(popover);
			}

			// Show loading state
			popover.innerHTML = '<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">' +
				'<h3 style="margin: 0;">Spark Application Spec</h3>' +
				'<button onclick="hideSpecPopover()" style="background: #dc3545; color: white; border: none; border-radius: 4px; padding: 8px 12px; cursor: pointer;">Close</button>' +
				'</div><div>Loading...</div>';

			// Show the overlay
			overlay.style.display = 'flex';

			// Fetch spec data
			fetch('/ui/applications/' + gatewayId + '/spec')
				.then(response => response.json())
				.then(data => {
					popover.innerHTML = '<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">' +
						'<h3 style="margin: 0;">Spark Application Spec</h3>' +
						'<button onclick="hideSpecPopover()" style="background: #dc3545; color: white; border: none; border-radius: 4px; padding: 8px 12px; cursor: pointer;">Close</button>' +
						'</div>' +
						'<div>' +
						'<h4>YAML Specification:</h4>' +
						'<pre style="background: #f8f9fa; padding: 15px; border-radius: 4px; overflow: auto; max-height: 500px; font-size: 12px;"><code>' + data.spec + '</code></pre>' +
						'</div>';
				})
				.catch(error => {
					popover.innerHTML = '<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">' +
						'<h3 style="margin: 0;">Spark Application Spec</h3>' +
						'<button onclick="hideSpecPopover()" style="background: #dc3545; color: white; border: none; border-radius: 4px; padding: 8px 12px; cursor: pointer;">Close</button>' +
						'</div>' +
						'<div style="color: #dc3545;">Error loading spec: ' + error.message + '</div>';
				});
		}

		function hideSpecPopover() {
			const overlay = document.getElementById('spec-overlay');
			if (overlay) {
				overlay.style.display = 'none';
			}
		}

		// Event delegation for spec buttons
		document.addEventListener('click', function(event) {
			if (event.target.classList.contains('spec-button')) {
				const gatewayId = event.target.getAttribute('data-gateway-id');
				showSpecPopover(gatewayId);
			}
			
			// Close popover when clicking outside
			const overlay = document.getElementById('spec-overlay');
			if (overlay && event.target === overlay) {
				hideSpecPopover();
			}
		});
	</script>
}

func formatTime(t time.Time) string {
	if t.IsZero() {
		return "-"
	}
	return t.Format("2006-01-02 15:04:05")
}

func formatAppState(state v1beta2.ApplicationState) string {
	return string(state.State)
}

func getStateColor(state string) string {
	switch state {
	case "COMPLETED":
		return "#28a745"
	case "RUNNING":
		return "#007bff"
	case "FAILED":
		return "#dc3545"
	case "PENDING":
		return "#ffc107"
	case "SUBMISSION_FAILED":
		return "#dc3545"
	case "INVALIDATING":
		return "#6c757d"
	case "SUCCEEDING":
		return "#17a2b8"
	case "FAILING":
		return "#fd7e14"
	default:
		return "#6c757d"
	}
}
