// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package middleware

import (
	"github.com/gin-gonic/gin"
	"sync"
)

// Ensure, that GatewayMiddlewareMock does implement GatewayMiddleware.
// If this is not the case, regenerate this file with moq.
var _ GatewayMiddleware = &GatewayMiddlewareMock{}

// GatewayMiddlewareMock is a mock implementation of GatewayMiddleware.
//
//	func TestSomethingThatUsesGatewayMiddleware(t *testing.T) {
//
//		// make and configure a mocked GatewayMiddleware
//		mockedGatewayMiddleware := &GatewayMiddlewareMock{
//			HandlerFunc: func(c *gin.Context)  {
//				panic("mock out the Handler method")
//			},
//		}
//
//		// use mockedGatewayMiddleware in code that requires GatewayMiddleware
//		// and then make assertions.
//
//	}
type GatewayMiddlewareMock struct {
	// HandlerFunc mocks the Handler method.
	HandlerFunc func(c *gin.Context)

	// calls tracks calls to the methods.
	calls struct {
		// Handler holds details about calls to the Handler method.
		Handler []struct {
			// C is the c argument value.
			C *gin.Context
		}
	}
	lockHandler sync.RWMutex
}

// Handler calls HandlerFunc.
func (mock *GatewayMiddlewareMock) Handler(c *gin.Context) {
	if mock.HandlerFunc == nil {
		panic("GatewayMiddlewareMock.HandlerFunc: method is nil but GatewayMiddleware.Handler was just called")
	}
	callInfo := struct {
		C *gin.Context
	}{
		C: c,
	}
	mock.lockHandler.Lock()
	mock.calls.Handler = append(mock.calls.Handler, callInfo)
	mock.lockHandler.Unlock()
	mock.HandlerFunc(c)
}

// HandlerCalls gets all the calls that were made to Handler.
// Check the length with:
//
//	len(mockedGatewayMiddleware.HandlerCalls())
func (mock *GatewayMiddlewareMock) HandlerCalls() []struct {
	C *gin.Context
} {
	var calls []struct {
		C *gin.Context
	}
	mock.lockHandler.RLock()
	calls = mock.calls.Handler
	mock.lockHandler.RUnlock()
	return calls
}
