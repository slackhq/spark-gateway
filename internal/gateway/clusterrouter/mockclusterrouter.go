// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package clusterrouter

import (
	"context"
	"sync"

	"github.com/slackhq/spark-gateway/internal/domain"
)

// Ensure, that ClusterRouterMock does implement ClusterRouter.
// If this is not the case, regenerate this file with moq.
var _ ClusterRouter = &ClusterRouterMock{}

// ClusterRouterMock is a mock implementation of ClusterRouter.
//
//	func TestSomethingThatUsesClusterRouter(t *testing.T) {
//
//		// make and configure a mocked ClusterRouter
//		mockedClusterRouter := &ClusterRouterMock{
//			GetClusterFunc: func(ctx context.Context, namespace string) (*domain.KubeCluster, error) {
//				panic("mock out the GetCluster method")
//			},
//		}
//
//		// use mockedClusterRouter in code that requires ClusterRouter
//		// and then make assertions.
//
//	}
type ClusterRouterMock struct {
	// GetClusterFunc mocks the GetCluster method.
	GetClusterFunc func(ctx context.Context, namespace string) (*domain.KubeCluster, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetCluster holds details about calls to the GetCluster method.
		GetCluster []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
	lockGetCluster sync.RWMutex
}

// GetCluster calls GetClusterFunc.
func (mock *ClusterRouterMock) GetCluster(ctx context.Context, namespace string) (*domain.KubeCluster, error) {
	if mock.GetClusterFunc == nil {
		panic("ClusterRouterMock.GetClusterFunc: method is nil but ClusterRouter.GetCluster was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Namespace string
	}{
		Ctx:       ctx,
		Namespace: namespace,
	}
	mock.lockGetCluster.Lock()
	mock.calls.GetCluster = append(mock.calls.GetCluster, callInfo)
	mock.lockGetCluster.Unlock()
	return mock.GetClusterFunc(ctx, namespace)
}

// GetClusterCalls gets all the calls that were made to GetCluster.
// Check the length with:
//
//	len(mockedClusterRouter.GetClusterCalls())
func (mock *ClusterRouterMock) GetClusterCalls() []struct {
	Ctx       context.Context
	Namespace string
} {
	var calls []struct {
		Ctx       context.Context
		Namespace string
	}
	mock.lockGetCluster.RLock()
	calls = mock.calls.GetCluster
	mock.lockGetCluster.RUnlock()
	return calls
}
