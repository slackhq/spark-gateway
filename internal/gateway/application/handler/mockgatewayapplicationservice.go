// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler

import (
	"context"
	"github.com/kubeflow/spark-operator/v2/api/v1beta2"
	"github.com/slackhq/spark-gateway/pkg/model"
	"sync"
)

// Ensure, that GatewayApplicationServiceMock does implement GatewayApplicationService.
// If this is not the case, regenerate this file with moq.
var _ GatewayApplicationService = &GatewayApplicationServiceMock{}

// GatewayApplicationServiceMock is a mock implementation of GatewayApplicationService.
//
//	func TestSomethingThatUsesGatewayApplicationService(t *testing.T) {
//
//		// make and configure a mocked GatewayApplicationService
//		mockedGatewayApplicationService := &GatewayApplicationServiceMock{
//			CreateFunc: func(ctx context.Context, application *v1beta2.SparkApplication, user string) (*model.GatewayApplication, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, gatewayId string) error {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(ctx context.Context, gatewayId string) (*model.GatewayApplication, error) {
//				panic("mock out the Get method")
//			},
//			ListFunc: func(ctx context.Context, cluster string, namespace string, appState *v1beta2.ApplicationStateType) ([]*model.GatewayApplicationMeta, error) {
//				panic("mock out the List method")
//			},
//			LogsFunc: func(ctx context.Context, gatewayId string, tailLines int) (*string, error) {
//				panic("mock out the Logs method")
//			},
//			StatusFunc: func(ctx context.Context, gatewayId string) (*v1beta2.SparkApplicationStatus, error) {
//				panic("mock out the Status method")
//			},
//		}
//
//		// use mockedGatewayApplicationService in code that requires GatewayApplicationService
//		// and then make assertions.
//
//	}
type GatewayApplicationServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, application *v1beta2.SparkApplication, user string) (*model.GatewayApplication, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, gatewayId string) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, gatewayId string) (*model.GatewayApplication, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, cluster string, namespace string, appState *v1beta2.ApplicationStateType) ([]*model.GatewayApplicationMeta, error)

	// LogsFunc mocks the Logs method.
	LogsFunc func(ctx context.Context, gatewayId string, tailLines int) (*string, error)

	// StatusFunc mocks the Status method.
	StatusFunc func(ctx context.Context, gatewayId string) (*v1beta2.SparkApplicationStatus, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Application is the application argument value.
			Application *v1beta2.SparkApplication
			// User is the user argument value.
			User string
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GatewayId is the gatewayId argument value.
			GatewayId string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GatewayId is the gatewayId argument value.
			GatewayId string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster string
			// Namespace is the namespace argument value.
			Namespace string
			// AppState is the appState argument value.
			AppState *v1beta2.ApplicationStateType
		}
		// Logs holds details about calls to the Logs method.
		Logs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GatewayId is the gatewayId argument value.
			GatewayId string
			// TailLines is the tailLines argument value.
			TailLines int
		}
		// Status holds details about calls to the Status method.
		Status []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GatewayId is the gatewayId argument value.
			GatewayId string
		}
	}
	lockCreate sync.RWMutex
	lockDelete sync.RWMutex
	lockGet    sync.RWMutex
	lockList   sync.RWMutex
	lockLogs   sync.RWMutex
	lockStatus sync.RWMutex
}

// Create calls CreateFunc.
func (mock *GatewayApplicationServiceMock) Create(ctx context.Context, application *v1beta2.SparkApplication, user string) (*model.GatewayApplication, error) {
	if mock.CreateFunc == nil {
		panic("GatewayApplicationServiceMock.CreateFunc: method is nil but GatewayApplicationService.Create was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Application *v1beta2.SparkApplication
		User        string
	}{
		Ctx:         ctx,
		Application: application,
		User:        user,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, application, user)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedGatewayApplicationService.CreateCalls())
func (mock *GatewayApplicationServiceMock) CreateCalls() []struct {
	Ctx         context.Context
	Application *v1beta2.SparkApplication
	User        string
} {
	var calls []struct {
		Ctx         context.Context
		Application *v1beta2.SparkApplication
		User        string
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *GatewayApplicationServiceMock) Delete(ctx context.Context, gatewayId string) error {
	if mock.DeleteFunc == nil {
		panic("GatewayApplicationServiceMock.DeleteFunc: method is nil but GatewayApplicationService.Delete was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		GatewayId string
	}{
		Ctx:       ctx,
		GatewayId: gatewayId,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, gatewayId)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedGatewayApplicationService.DeleteCalls())
func (mock *GatewayApplicationServiceMock) DeleteCalls() []struct {
	Ctx       context.Context
	GatewayId string
} {
	var calls []struct {
		Ctx       context.Context
		GatewayId string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *GatewayApplicationServiceMock) Get(ctx context.Context, gatewayId string) (*model.GatewayApplication, error) {
	if mock.GetFunc == nil {
		panic("GatewayApplicationServiceMock.GetFunc: method is nil but GatewayApplicationService.Get was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		GatewayId string
	}{
		Ctx:       ctx,
		GatewayId: gatewayId,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, gatewayId)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedGatewayApplicationService.GetCalls())
func (mock *GatewayApplicationServiceMock) GetCalls() []struct {
	Ctx       context.Context
	GatewayId string
} {
	var calls []struct {
		Ctx       context.Context
		GatewayId string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *GatewayApplicationServiceMock) List(ctx context.Context, cluster string, namespace string, appState *v1beta2.ApplicationStateType) ([]*model.GatewayApplicationMeta, error) {
	if mock.ListFunc == nil {
		panic("GatewayApplicationServiceMock.ListFunc: method is nil but GatewayApplicationService.List was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Cluster   string
		Namespace string
		AppState  *v1beta2.ApplicationStateType
	}{
		Ctx:       ctx,
		Cluster:   cluster,
		Namespace: namespace,
		AppState:  appState,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, cluster, namespace, appState)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedGatewayApplicationService.ListCalls())
func (mock *GatewayApplicationServiceMock) ListCalls() []struct {
	Ctx       context.Context
	Cluster   string
	Namespace string
	AppState  *v1beta2.ApplicationStateType
} {
	var calls []struct {
		Ctx       context.Context
		Cluster   string
		Namespace string
		AppState  *v1beta2.ApplicationStateType
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Logs calls LogsFunc.
func (mock *GatewayApplicationServiceMock) Logs(ctx context.Context, gatewayId string, tailLines int) (*string, error) {
	if mock.LogsFunc == nil {
		panic("GatewayApplicationServiceMock.LogsFunc: method is nil but GatewayApplicationService.Logs was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		GatewayId string
		TailLines int
	}{
		Ctx:       ctx,
		GatewayId: gatewayId,
		TailLines: tailLines,
	}
	mock.lockLogs.Lock()
	mock.calls.Logs = append(mock.calls.Logs, callInfo)
	mock.lockLogs.Unlock()
	return mock.LogsFunc(ctx, gatewayId, tailLines)
}

// LogsCalls gets all the calls that were made to Logs.
// Check the length with:
//
//	len(mockedGatewayApplicationService.LogsCalls())
func (mock *GatewayApplicationServiceMock) LogsCalls() []struct {
	Ctx       context.Context
	GatewayId string
	TailLines int
} {
	var calls []struct {
		Ctx       context.Context
		GatewayId string
		TailLines int
	}
	mock.lockLogs.RLock()
	calls = mock.calls.Logs
	mock.lockLogs.RUnlock()
	return calls
}

// Status calls StatusFunc.
func (mock *GatewayApplicationServiceMock) Status(ctx context.Context, gatewayId string) (*v1beta2.SparkApplicationStatus, error) {
	if mock.StatusFunc == nil {
		panic("GatewayApplicationServiceMock.StatusFunc: method is nil but GatewayApplicationService.Status was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		GatewayId string
	}{
		Ctx:       ctx,
		GatewayId: gatewayId,
	}
	mock.lockStatus.Lock()
	mock.calls.Status = append(mock.calls.Status, callInfo)
	mock.lockStatus.Unlock()
	return mock.StatusFunc(ctx, gatewayId)
}

// StatusCalls gets all the calls that were made to Status.
// Check the length with:
//
//	len(mockedGatewayApplicationService.StatusCalls())
func (mock *GatewayApplicationServiceMock) StatusCalls() []struct {
	Ctx       context.Context
	GatewayId string
} {
	var calls []struct {
		Ctx       context.Context
		GatewayId string
	}
	mock.lockStatus.RLock()
	calls = mock.calls.Status
	mock.lockStatus.RUnlock()
	return calls
}
