// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/slackhq/spark-gateway/internal/domain"
	"sync"
)

// Ensure, that LivyApplicationServiceMock does implement LivyApplicationService.
// If this is not the case, regenerate this file with moq.
var _ LivyApplicationService = &LivyApplicationServiceMock{}

// LivyApplicationServiceMock is a mock implementation of LivyApplicationService.
//
//	func TestSomethingThatUsesLivyApplicationService(t *testing.T) {
//
//		// make and configure a mocked LivyApplicationService
//		mockedLivyApplicationService := &LivyApplicationServiceMock{
//			CreateFunc: func(ctx context.Context, createReq domain.LivyCreateBatchRequest, namespace string) (*domain.LivyBatch, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, batchId int) error {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(ctx context.Context, batchId int) (*domain.LivyBatch, error) {
//				panic("mock out the Get method")
//			},
//			ListFunc: func(ctx context.Context, from int, size int) ([]*domain.LivyBatch, error) {
//				panic("mock out the List method")
//			},
//			LogsFunc: func(ctx context.Context, batchId int, size int) ([]string, error) {
//				panic("mock out the Logs method")
//			},
//		}
//
//		// use mockedLivyApplicationService in code that requires LivyApplicationService
//		// and then make assertions.
//
//	}
type LivyApplicationServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, createReq domain.LivyCreateBatchRequest, namespace string) (*domain.LivyBatch, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, batchId int) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, batchId int) (*domain.LivyBatch, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, from int, size int) ([]*domain.LivyBatch, error)

	// LogsFunc mocks the Logs method.
	LogsFunc func(ctx context.Context, batchId int, size int) ([]string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CreateReq is the createReq argument value.
			CreateReq domain.LivyCreateBatchRequest
			// Namespace is the namespace argument value.
			Namespace string
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BatchId is the batchId argument value.
			BatchId int
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BatchId is the batchId argument value.
			BatchId int
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// From is the from argument value.
			From int
			// Size is the size argument value.
			Size int
		}
		// Logs holds details about calls to the Logs method.
		Logs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BatchId is the batchId argument value.
			BatchId int
			// Size is the size argument value.
			Size int
		}
	}
	lockCreate sync.RWMutex
	lockDelete sync.RWMutex
	lockGet    sync.RWMutex
	lockList   sync.RWMutex
	lockLogs   sync.RWMutex
}

// Create calls CreateFunc.
func (mock *LivyApplicationServiceMock) Create(ctx context.Context, createReq domain.LivyCreateBatchRequest, namespace string) (*domain.LivyBatch, error) {
	if mock.CreateFunc == nil {
		panic("LivyApplicationServiceMock.CreateFunc: method is nil but LivyApplicationService.Create was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		CreateReq domain.LivyCreateBatchRequest
		Namespace string
	}{
		Ctx:       ctx,
		CreateReq: createReq,
		Namespace: namespace,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, createReq, namespace)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedLivyApplicationService.CreateCalls())
func (mock *LivyApplicationServiceMock) CreateCalls() []struct {
	Ctx       context.Context
	CreateReq domain.LivyCreateBatchRequest
	Namespace string
} {
	var calls []struct {
		Ctx       context.Context
		CreateReq domain.LivyCreateBatchRequest
		Namespace string
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *LivyApplicationServiceMock) Delete(ctx context.Context, batchId int) error {
	if mock.DeleteFunc == nil {
		panic("LivyApplicationServiceMock.DeleteFunc: method is nil but LivyApplicationService.Delete was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		BatchId int
	}{
		Ctx:     ctx,
		BatchId: batchId,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, batchId)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedLivyApplicationService.DeleteCalls())
func (mock *LivyApplicationServiceMock) DeleteCalls() []struct {
	Ctx     context.Context
	BatchId int
} {
	var calls []struct {
		Ctx     context.Context
		BatchId int
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *LivyApplicationServiceMock) Get(ctx context.Context, batchId int) (*domain.LivyBatch, error) {
	if mock.GetFunc == nil {
		panic("LivyApplicationServiceMock.GetFunc: method is nil but LivyApplicationService.Get was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		BatchId int
	}{
		Ctx:     ctx,
		BatchId: batchId,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, batchId)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedLivyApplicationService.GetCalls())
func (mock *LivyApplicationServiceMock) GetCalls() []struct {
	Ctx     context.Context
	BatchId int
} {
	var calls []struct {
		Ctx     context.Context
		BatchId int
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *LivyApplicationServiceMock) List(ctx context.Context, from int, size int) ([]*domain.LivyBatch, error) {
	if mock.ListFunc == nil {
		panic("LivyApplicationServiceMock.ListFunc: method is nil but LivyApplicationService.List was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		From int
		Size int
	}{
		Ctx:  ctx,
		From: from,
		Size: size,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, from, size)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedLivyApplicationService.ListCalls())
func (mock *LivyApplicationServiceMock) ListCalls() []struct {
	Ctx  context.Context
	From int
	Size int
} {
	var calls []struct {
		Ctx  context.Context
		From int
		Size int
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Logs calls LogsFunc.
func (mock *LivyApplicationServiceMock) Logs(ctx context.Context, batchId int, size int) ([]string, error) {
	if mock.LogsFunc == nil {
		panic("LivyApplicationServiceMock.LogsFunc: method is nil but LivyApplicationService.Logs was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		BatchId int
		Size    int
	}{
		Ctx:     ctx,
		BatchId: batchId,
		Size:    size,
	}
	mock.lockLogs.Lock()
	mock.calls.Logs = append(mock.calls.Logs, callInfo)
	mock.lockLogs.Unlock()
	return mock.LogsFunc(ctx, batchId, size)
}

// LogsCalls gets all the calls that were made to Logs.
// Check the length with:
//
//	len(mockedLivyApplicationService.LogsCalls())
func (mock *LivyApplicationServiceMock) LogsCalls() []struct {
	Ctx     context.Context
	BatchId int
	Size    int
} {
	var calls []struct {
		Ctx     context.Context
		BatchId int
		Size    int
	}
	mock.lockLogs.RLock()
	calls = mock.calls.Logs
	mock.lockLogs.RUnlock()
	return calls
}
