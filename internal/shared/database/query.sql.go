// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getByBatchId = `-- name: GetByBatchId :one
SELECT uid, batch_id, name, creation_time, termination_time, username, namespace, cluster, submitted, updated, state, status FROM spark_applications WHERE batch_id = $1
`

func (q *Queries) GetByBatchId(ctx context.Context, batchID *int64) (SparkApplication, error) {
	row := q.db.QueryRow(ctx, getByBatchId, batchID)
	var i SparkApplication
	err := row.Scan(
		&i.Uid,
		&i.BatchID,
		&i.Name,
		&i.CreationTime,
		&i.TerminationTime,
		&i.Username,
		&i.Namespace,
		&i.Cluster,
		&i.Submitted,
		&i.Updated,
		&i.State,
		&i.Status,
	)
	return i, err
}

const getById = `-- name: GetById :one

SELECT uid, batch_id, name, creation_time, termination_time, username, namespace, cluster, submitted, updated, state, status FROM spark_applications WHERE
uid = $1
`

// define application queries
func (q *Queries) GetById(ctx context.Context, uid uuid.UUID) (SparkApplication, error) {
	row := q.db.QueryRow(ctx, getById, uid)
	var i SparkApplication
	err := row.Scan(
		&i.Uid,
		&i.BatchID,
		&i.Name,
		&i.CreationTime,
		&i.TerminationTime,
		&i.Username,
		&i.Namespace,
		&i.Cluster,
		&i.Submitted,
		&i.Updated,
		&i.State,
		&i.Status,
	)
	return i, err
}

const insertSparkApplication = `-- name: InsertSparkApplication :one
INSERT INTO spark_applications (
    uid,
    batch_id,
    name,
    creation_time,
    username,
    namespace,
    cluster,
    submitted
)
VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8::jsonb
)
ON CONFLICT (uid)
DO UPDATE SET
    name = EXCLUDED.name,
    creation_time = EXCLUDED.creation_time,
    username = EXCLUDED.username,
    namespace = EXCLUDED.namespace,
    cluster = EXCLUDED.cluster,
    submitted = EXCLUDED.submitted
RETURNING uid, batch_id, name, creation_time, termination_time, username, namespace, cluster, submitted, updated, state, status
`

type InsertSparkApplicationParams struct {
	Uid          uuid.UUID  `json:"uid"`
	BatchID      *int64     `json:"batch_id"`
	Name         *string    `json:"name"`
	CreationTime *time.Time `json:"creation_time"`
	Username     *string    `json:"username"`
	Namespace    *string    `json:"namespace"`
	Cluster      *string    `json:"cluster"`
	Submitted    []byte     `json:"submitted"`
}

func (q *Queries) InsertSparkApplication(ctx context.Context, arg InsertSparkApplicationParams) (SparkApplication, error) {
	row := q.db.QueryRow(ctx, insertSparkApplication,
		arg.Uid,
		arg.BatchID,
		arg.Name,
		arg.CreationTime,
		arg.Username,
		arg.Namespace,
		arg.Cluster,
		arg.Submitted,
	)
	var i SparkApplication
	err := row.Scan(
		&i.Uid,
		&i.BatchID,
		&i.Name,
		&i.CreationTime,
		&i.TerminationTime,
		&i.Username,
		&i.Namespace,
		&i.Cluster,
		&i.Submitted,
		&i.Updated,
		&i.State,
		&i.Status,
	)
	return i, err
}

const listFrom = `-- name: ListFrom :many
SELECT uid, batch_id, name, creation_time, termination_time, username, namespace, cluster, submitted, updated, state, status FROM spark_applications
WHERE batch_id >= $1
ORDER BY batch_id ASC
LIMIT $2
`

type ListFromParams struct {
	Fromid *int64 `json:"fromid"`
	Size   int32  `json:"size"`
}

func (q *Queries) ListFrom(ctx context.Context, arg ListFromParams) ([]SparkApplication, error) {
	rows, err := q.db.Query(ctx, listFrom, arg.Fromid, arg.Size)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SparkApplication
	for rows.Next() {
		var i SparkApplication
		if err := rows.Scan(
			&i.Uid,
			&i.BatchID,
			&i.Name,
			&i.CreationTime,
			&i.TerminationTime,
			&i.Username,
			&i.Namespace,
			&i.Cluster,
			&i.Submitted,
			&i.Updated,
			&i.State,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSparkApplication = `-- name: UpdateSparkApplication :one
INSERT INTO spark_applications (
    uid,
    termination_time,
    updated,
    state,
    status
)
VALUES (
    $1, $2, $3::jsonb, $4, $5::jsonb
)
ON CONFLICT (uid)
DO UPDATE SET
    termination_time = EXCLUDED.termination_time,
    updated = EXCLUDED.updated,
    state = EXCLUDED.state,
    status = EXCLUDED.status
RETURNING uid, batch_id, name, creation_time, termination_time, username, namespace, cluster, submitted, updated, state, status
`

type UpdateSparkApplicationParams struct {
	Uid             uuid.UUID  `json:"uid"`
	TerminationTime *time.Time `json:"termination_time"`
	Updated         []byte     `json:"updated"`
	State           *string    `json:"state"`
	Status          []byte     `json:"status"`
}

func (q *Queries) UpdateSparkApplication(ctx context.Context, arg UpdateSparkApplicationParams) (SparkApplication, error) {
	row := q.db.QueryRow(ctx, updateSparkApplication,
		arg.Uid,
		arg.TerminationTime,
		arg.Updated,
		arg.State,
		arg.Status,
	)
	var i SparkApplication
	err := row.Scan(
		&i.Uid,
		&i.BatchID,
		&i.Name,
		&i.CreationTime,
		&i.TerminationTime,
		&i.Username,
		&i.Namespace,
		&i.Cluster,
		&i.Submitted,
		&i.Updated,
		&i.State,
		&i.Status,
	)
	return i, err
}
